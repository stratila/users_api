stages:
  - stat
  - build
  - test
  - push

shared_runner_stats:
  stage: stat
  image: "ubuntu:latest"
  script:
    - free -m | grep -v "Swap" # RAM
    - df -h| grep -E "Filesystem|overlay" # storage
    - lscpu | grep -E "^CPU\(s\)" # CPUs


build_image:
  image: docker:20
  stage: build
  services:
    - docker:dind
  script:
    - export IMAGE_TAG=users-api
    
    # Build the Docker image with Google Artifact Registry format
    - docker build -t $CI_REGISTRY_IMAGE/${IMAGE_TAG}:${CI_COMMIT_SHA} .
    
    # Push the Docker image to the GitLab registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/${IMAGE_TAG}:${CI_COMMIT_SHA}
  
  tags:
    - docker

# Define job for running tests and database migrations
before_script:
  - apt-get update -y
  - apt-get install -y postgresql postgresql-contrib
  - service postgresql start
  - psql -c "CREATE USER myuser WITH PASSWORD 'mypass';" -U postgres
  - psql -c "CREATE DATABASE mydb WITH OWNER myuser;" -U postgres

integration_test:
  image: docker:20
  stage: test
  services:
    - postgres:9.6
  script:
    # Pull the Docker image from the GitLab registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/${IMAGE_TAG}:${CI_COMMIT_SHA}
    - docker run --rm -e DB_HOST=postgres -e DB_PORT=5432 -e DB_NAME=mydb -e DB_USER=myuser -e DB_PASS=mypassword -e JWT_SECRET_KEY=secret -e JWT_ALGORITHM=HS256 -e ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30} $CI_REGISTRY_IMAGE/${IMAGE_TAG}:${CI_COMMIT_SHA} /bin/sh -c "/scripts/migrate.sh; pytest -vvv"


push_image:
  image: docker:20
  stage: push
  services:
    - docker:dind
  script:
    # Set environment variables
    - export PROJECT_ID=modular-granite-374519
    - export REGION=us-central1
    - export REPO_NAME=users-docker-repo
    - export IMAGE_TAG=users-api
    
    # Authenticate to GCP Artifact Registry
    - echo ${GOOGLE_APPLICATION_CREDENTIALS} | base64 -d > /tmp/gcp-key.json
    - docker login -u _json_key --password-stdin https://${REGION}-docker.pkg.dev < /tmp/gcp-key.json
    
    # Pull the Docker image from the GitLab registry
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/${IMAGE_TAG}:${CI_COMMIT_SHA}
    
    # Tag the Docker image with the GCP Artifact Registry format
    - docker tag $CI_REGISTRY_IMAGE/${IMAGE_TAG}:${CI_COMMIT_SHA} ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${IMAGE_TAG}:$CI_COMMIT_SHA
    
    # Push the Docker image to GCP Artifact Registry
    - docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${IMAGE_TAG}:$CI_COMMIT_SHA
  
  tags:
    - docker
